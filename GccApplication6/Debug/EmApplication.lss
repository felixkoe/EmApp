
EmApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  00800100  00800100  00000550  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c03  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b0  00000000  00000000  00001283  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c7  00000000  00000000  00001b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  000021fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051e  00000000  00000000  00002414  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047b  00000000  00000000  00002932  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002dad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 33       	cpi	r26, 0x3D	; 61
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 56 02 	call	0x4ac	; 0x4ac <main>
  88:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_13>:
	}customTimer;

volatile customTimer timerArray[5];


ISR(TIMER1_OVF_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	0f 93       	push	r16
  9c:	1f 93       	push	r17
  9e:	2f 93       	push	r18
  a0:	3f 93       	push	r19
  a2:	4f 93       	push	r20
  a4:	5f 93       	push	r21
  a6:	6f 93       	push	r22
  a8:	7f 93       	push	r23
  aa:	8f 93       	push	r24
  ac:	9f 93       	push	r25
  ae:	af 93       	push	r26
  b0:	bf 93       	push	r27
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
	for(int i = 0; i < 5; i++){
  ba:	c0 e0       	ldi	r28, 0x00	; 0
  bc:	d0 e0       	ldi	r29, 0x00	; 0
  be:	30 c0       	rjmp	.+96     	; 0x120 <__vector_13+0x90>
		if(timerArray[i].isActive == 1){
  c0:	8b e0       	ldi	r24, 0x0B	; 11
  c2:	8c 9f       	mul	r24, r28
  c4:	f0 01       	movw	r30, r0
  c6:	8d 9f       	mul	r24, r29
  c8:	f0 0d       	add	r31, r0
  ca:	11 24       	eor	r1, r1
  cc:	ea 5f       	subi	r30, 0xFA	; 250
  ce:	fe 4f       	sbci	r31, 0xFE	; 254
  d0:	80 85       	ldd	r24, Z+8	; 0x08
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	21 f5       	brne	.+72     	; 0x11e <__vector_13+0x8e>
			timerArray[i].remainTime--;
  d6:	8b e0       	ldi	r24, 0x0B	; 11
  d8:	8c 9f       	mul	r24, r28
  da:	f0 01       	movw	r30, r0
  dc:	8d 9f       	mul	r24, r29
  de:	f0 0d       	add	r31, r0
  e0:	11 24       	eor	r1, r1
  e2:	ea 5f       	subi	r30, 0xFA	; 250
  e4:	fe 4f       	sbci	r31, 0xFE	; 254
  e6:	84 81       	ldd	r24, Z+4	; 0x04
  e8:	95 81       	ldd	r25, Z+5	; 0x05
  ea:	a6 81       	ldd	r26, Z+6	; 0x06
  ec:	b7 81       	ldd	r27, Z+7	; 0x07
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	a1 09       	sbc	r26, r1
  f2:	b1 09       	sbc	r27, r1
  f4:	84 83       	std	Z+4, r24	; 0x04
  f6:	95 83       	std	Z+5, r25	; 0x05
  f8:	a6 83       	std	Z+6, r26	; 0x06
  fa:	b7 83       	std	Z+7, r27	; 0x07
			if(timerArray[i].remainTime <= 0){
  fc:	84 81       	ldd	r24, Z+4	; 0x04
  fe:	95 81       	ldd	r25, Z+5	; 0x05
 100:	a6 81       	ldd	r26, Z+6	; 0x06
 102:	b7 81       	ldd	r27, Z+7	; 0x07
 104:	89 2b       	or	r24, r25
 106:	8a 2b       	or	r24, r26
 108:	8b 2b       	or	r24, r27
 10a:	49 f4       	brne	.+18     	; 0x11e <__vector_13+0x8e>
				cli();
 10c:	f8 94       	cli
				timerArray[i].callbackFunc();
 10e:	8f 01       	movw	r16, r30
 110:	01 84       	ldd	r0, Z+9	; 0x09
 112:	f2 85       	ldd	r31, Z+10	; 0x0a
 114:	e0 2d       	mov	r30, r0
 116:	09 95       	icall
				timerArray[i].isActive = 0;
 118:	f8 01       	movw	r30, r16
 11a:	10 86       	std	Z+8, r1	; 0x08
				sei();
 11c:	78 94       	sei

volatile customTimer timerArray[5];


ISR(TIMER1_OVF_vect){
	for(int i = 0; i < 5; i++){
 11e:	21 96       	adiw	r28, 0x01	; 1
 120:	c5 30       	cpi	r28, 0x05	; 5
 122:	d1 05       	cpc	r29, r1
 124:	6c f2       	brlt	.-102    	; 0xc0 <__vector_13+0x30>
				sei();
			}
	
		}
	}
}
 126:	ff 91       	pop	r31
 128:	ef 91       	pop	r30
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	7f 91       	pop	r23
 138:	6f 91       	pop	r22
 13a:	5f 91       	pop	r21
 13c:	4f 91       	pop	r20
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <initCoustomTimers>:

void initCoustomTimers(){
	
	TIMSK1 |= (1<<TOIE1);
 150:	ef e6       	ldi	r30, 0x6F	; 111
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	81 60       	ori	r24, 0x01	; 1
 158:	80 83       	st	Z, r24
	//prescaling Timer 1(64)
	TCCR1B &= ~(1<<CS12); //set bit 2 to 0
 15a:	e1 e8       	ldi	r30, 0x81	; 129
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	8b 7f       	andi	r24, 0xFB	; 251
 162:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11); //set bit 1 to 1
 164:	80 81       	ld	r24, Z
 166:	82 60       	ori	r24, 0x02	; 2
 168:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS10); //set bit 0 to 1
 16a:	80 81       	ld	r24, Z
 16c:	81 60       	ori	r24, 0x01	; 1
 16e:	80 83       	st	Z, r24
	TCNT1 = 65286;
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	9f ef       	ldi	r25, 0xFF	; 255
 174:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 178:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	for(int i = 0; i < 5 ; i++){
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	14 c0       	rjmp	.+40     	; 0x1aa <initCoustomTimers+0x5a>
		
		timerArray[i].startTime = 0;
 182:	2b e0       	ldi	r18, 0x0B	; 11
 184:	28 9f       	mul	r18, r24
 186:	f0 01       	movw	r30, r0
 188:	29 9f       	mul	r18, r25
 18a:	f0 0d       	add	r31, r0
 18c:	11 24       	eor	r1, r1
 18e:	ea 5f       	subi	r30, 0xFA	; 250
 190:	fe 4f       	sbci	r31, 0xFE	; 254
 192:	10 82       	st	Z, r1
 194:	11 82       	std	Z+1, r1	; 0x01
 196:	12 82       	std	Z+2, r1	; 0x02
 198:	13 82       	std	Z+3, r1	; 0x03
		timerArray[i].remainTime = 0;
 19a:	14 82       	std	Z+4, r1	; 0x04
 19c:	15 82       	std	Z+5, r1	; 0x05
 19e:	16 82       	std	Z+6, r1	; 0x06
 1a0:	17 82       	std	Z+7, r1	; 0x07
		timerArray[i].isActive = 0;
 1a2:	10 86       	std	Z+8, r1	; 0x08
		timerArray[i].callbackFunc = 0;
 1a4:	12 86       	std	Z+10, r1	; 0x0a
 1a6:	11 86       	std	Z+9, r1	; 0x09
	TCCR1B &= ~(1<<CS12); //set bit 2 to 0
	TCCR1B |= (1<<CS11); //set bit 1 to 1
	TCCR1B |= (1<<CS10); //set bit 0 to 1
	TCNT1 = 65286;
	
	for(int i = 0; i < 5 ; i++){
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	85 30       	cpi	r24, 0x05	; 5
 1ac:	91 05       	cpc	r25, r1
 1ae:	4c f3       	brlt	.-46     	; 0x182 <initCoustomTimers+0x32>
		timerArray[i].remainTime = 0;
		timerArray[i].isActive = 0;
		timerArray[i].callbackFunc = 0;
		
	}
}
 1b0:	08 95       	ret

000001b2 <declareTimer>:

void declareTimer(uint8_t i, uint8_t duration, callBackFuncT callback)
{
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
	timerArray[i].startTime = duration; 
 1b6:	06 2f       	mov	r16, r22
 1b8:	10 e0       	ldi	r17, 0x00	; 0
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	6b e0       	ldi	r22, 0x0B	; 11
 1c0:	86 9f       	mul	r24, r22
 1c2:	c0 01       	movw	r24, r0
 1c4:	11 24       	eor	r1, r1
 1c6:	fc 01       	movw	r30, r24
 1c8:	ea 5f       	subi	r30, 0xFA	; 250
 1ca:	fe 4f       	sbci	r31, 0xFE	; 254
 1cc:	00 83       	st	Z, r16
 1ce:	11 83       	std	Z+1, r17	; 0x01
 1d0:	22 83       	std	Z+2, r18	; 0x02
 1d2:	33 83       	std	Z+3, r19	; 0x03
	timerArray[i].callbackFunc = callback;
 1d4:	52 87       	std	Z+10, r21	; 0x0a
 1d6:	41 87       	std	Z+9, r20	; 0x09
}
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret

000001de <startTimer>:

void startTimer(uint8_t i)
{
	timerArray[1].remainTime = timerArray[1].startTime;
 1de:	e6 e0       	ldi	r30, 0x06	; 6
 1e0:	f1 e0       	ldi	r31, 0x01	; 1
 1e2:	43 85       	ldd	r20, Z+11	; 0x0b
 1e4:	54 85       	ldd	r21, Z+12	; 0x0c
 1e6:	65 85       	ldd	r22, Z+13	; 0x0d
 1e8:	76 85       	ldd	r23, Z+14	; 0x0e
 1ea:	47 87       	std	Z+15, r20	; 0x0f
 1ec:	50 8b       	std	Z+16, r21	; 0x10
 1ee:	61 8b       	std	Z+17, r22	; 0x11
 1f0:	72 8b       	std	Z+18, r23	; 0x12
	timerArray[i].isActive = 1;
 1f2:	2b e0       	ldi	r18, 0x0B	; 11
 1f4:	82 9f       	mul	r24, r18
 1f6:	c0 01       	movw	r24, r0
 1f8:	11 24       	eor	r1, r1
 1fa:	fc 01       	movw	r30, r24
 1fc:	ea 5f       	subi	r30, 0xFA	; 250
 1fe:	fe 4f       	sbci	r31, 0xFE	; 254
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 87       	std	Z+8, r24	; 0x08
 204:	08 95       	ret

00000206 <deleteTimer>:
}

void deleteTimer(uint8_t i)
{
	timerArray[i].startTime = 0;
 206:	2b e0       	ldi	r18, 0x0B	; 11
 208:	82 9f       	mul	r24, r18
 20a:	c0 01       	movw	r24, r0
 20c:	11 24       	eor	r1, r1
 20e:	fc 01       	movw	r30, r24
 210:	ea 5f       	subi	r30, 0xFA	; 250
 212:	fe 4f       	sbci	r31, 0xFE	; 254
 214:	10 82       	st	Z, r1
 216:	11 82       	std	Z+1, r1	; 0x01
 218:	12 82       	std	Z+2, r1	; 0x02
 21a:	13 82       	std	Z+3, r1	; 0x03
	timerArray[i].remainTime = 0;
 21c:	14 82       	std	Z+4, r1	; 0x04
 21e:	15 82       	std	Z+5, r1	; 0x05
 220:	16 82       	std	Z+6, r1	; 0x06
 222:	17 82       	std	Z+7, r1	; 0x07
	timerArray[i].isActive = 0;
 224:	10 86       	std	Z+8, r1	; 0x08
	timerArray[i].callbackFunc = 0;
 226:	12 86       	std	Z+10, r1	; 0x0a
 228:	11 86       	std	Z+9, r1	; 0x09
 22a:	08 95       	ret

0000022c <InterruptInnit>:

volatile uint8_t timer0OverflowCounter = 0;


void InterruptInnit(){
	EICRA |= (1 << ISC01) | (1 << ISC00);
 22c:	e9 e6       	ldi	r30, 0x69	; 105
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	83 60       	ori	r24, 0x03	; 3
 234:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
 236:	8d b3       	in	r24, 0x1d	; 29
 238:	81 60       	ori	r24, 0x01	; 1
 23a:	8d bb       	out	0x1d, r24	; 29
	
	//Prescaller einstellen
	TCCR0B |= (1 << CS00) | (1 << CS02);
 23c:	85 b5       	in	r24, 0x25	; 37
 23e:	85 60       	ori	r24, 0x05	; 5
 240:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1 << CS01);
 242:	85 b5       	in	r24, 0x25	; 37
 244:	8d 7f       	andi	r24, 0xFD	; 253
 246:	85 bd       	out	0x25, r24	; 37
	//8Bit Timer0 anschalten
	TIMSK0 |= (1 << TOIE0);
 248:	ee e6       	ldi	r30, 0x6E	; 110
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	81 60       	ori	r24, 0x01	; 1
 250:	80 83       	st	Z, r24
 252:	08 95       	ret

00000254 <TimerInnit>:
	
}

void TimerInnit(){
	//Timer Modus festlegen hier Normal Mode
	TCCR0A &= ~(1 << WGM00); 
 254:	84 b5       	in	r24, 0x24	; 36
 256:	8e 7f       	andi	r24, 0xFE	; 254
 258:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1 << WGM01); 
 25a:	84 b5       	in	r24, 0x24	; 36
 25c:	8d 7f       	andi	r24, 0xFD	; 253
 25e:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1 << WGM02); 
 260:	85 b5       	in	r24, 0x25	; 37
 262:	87 7f       	andi	r24, 0xF7	; 247
 264:	85 bd       	out	0x25, r24	; 37
	
	//Compare MAtch Output Ausschalten
	TCCR0A &= ~(1 << COM0A0);
 266:	84 b5       	in	r24, 0x24	; 36
 268:	8f 7b       	andi	r24, 0xBF	; 191
 26a:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1 << COM0A1);
 26c:	84 b5       	in	r24, 0x24	; 36
 26e:	8f 77       	andi	r24, 0x7F	; 127
 270:	84 bd       	out	0x24, r24	; 36
 272:	08 95       	ret

00000274 <PinInnit>:
}

void PinInnit(){
	
	//set Pins as Output
	DDRB |= (1<<DDB1) | (1<<DDB0) | (1<<DDB2);
 274:	84 b1       	in	r24, 0x04	; 4
 276:	87 60       	ori	r24, 0x07	; 7
 278:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<DDD7) | (1<<DDD3);
 27a:	8a b1       	in	r24, 0x0a	; 10
 27c:	88 68       	ori	r24, 0x88	; 136
 27e:	8a b9       	out	0x0a, r24	; 10
	//Make Pins HIGH or LOW to set start value
	
	//HIGH
	//PORTB |= (1<<DDB2);
	//LOW
	PORTB &= ~(1<<PORTB1);
 280:	85 b1       	in	r24, 0x05	; 5
 282:	8d 7f       	andi	r24, 0xFD	; 253
 284:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PORTB0);
 286:	85 b1       	in	r24, 0x05	; 5
 288:	8e 7f       	andi	r24, 0xFE	; 254
 28a:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PORTB2);
 28c:	85 b1       	in	r24, 0x05	; 5
 28e:	8b 7f       	andi	r24, 0xFB	; 251
 290:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~(1<<PORTD7);
 292:	8b b1       	in	r24, 0x0b	; 11
 294:	8f 77       	andi	r24, 0x7F	; 127
 296:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<PORTD3);
 298:	8b b1       	in	r24, 0x0b	; 11
 29a:	87 7f       	andi	r24, 0xF7	; 247
 29c:	8b b9       	out	0x0b, r24	; 11
	
	//set Pins as Input
	DDRD &= ~(1<<DDD6);
 29e:	8a b1       	in	r24, 0x0a	; 10
 2a0:	8f 7b       	andi	r24, 0xBF	; 191
 2a2:	8a b9       	out	0x0a, r24	; 10
	
	//enable Pull Up Resistor
	PORTD |= (1<<PORTD6);
 2a4:	8b b1       	in	r24, 0x0b	; 11
 2a6:	80 64       	ori	r24, 0x40	; 64
 2a8:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<PORTD2);
 2aa:	8b b1       	in	r24, 0x0b	; 11
 2ac:	84 60       	ori	r24, 0x04	; 4
 2ae:	8b b9       	out	0x0b, r24	; 11
 2b0:	08 95       	ret

000002b2 <setEvent>:
	
}


void setEvent(uint8_t e){
	event |= e;
 2b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <event>
 2b6:	89 2b       	or	r24, r25
 2b8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <event>
 2bc:	08 95       	ret

000002be <deleteEvent>:
}

void deleteEvent(uint8_t e){
	event &= ~e;
 2be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <event>
 2c2:	80 95       	com	r24
 2c4:	98 23       	and	r25, r24
 2c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <event>
 2ca:	08 95       	ret

000002cc <isEventSet>:
}

int isEventSet(uint8_t e){
	if(event & e){
 2cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <event>
 2d0:	89 23       	and	r24, r25
 2d2:	19 f0       	breq	.+6      	; 0x2da <isEventSet+0xe>
		return 1;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	08 95       	ret
	}
	else{
		return 0;
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 2de:	08 95       	ret

000002e0 <__vector_1>:


ISR(INT0_vect){
 2e0:	1f 92       	push	r1
 2e2:	0f 92       	push	r0
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	0f 92       	push	r0
 2e8:	11 24       	eor	r1, r1
 2ea:	2f 93       	push	r18
 2ec:	3f 93       	push	r19
 2ee:	4f 93       	push	r20
 2f0:	5f 93       	push	r21
 2f2:	6f 93       	push	r22
 2f4:	7f 93       	push	r23
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	af 93       	push	r26
 2fc:	bf 93       	push	r27
 2fe:	ef 93       	push	r30
 300:	ff 93       	push	r31
	//do something if Ext-Interrupt is triggered
	setEvent(e1);
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 59 01 	call	0x2b2	; 0x2b2 <setEvent>
}
 308:	ff 91       	pop	r31
 30a:	ef 91       	pop	r30
 30c:	bf 91       	pop	r27
 30e:	af 91       	pop	r26
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	7f 91       	pop	r23
 316:	6f 91       	pop	r22
 318:	5f 91       	pop	r21
 31a:	4f 91       	pop	r20
 31c:	3f 91       	pop	r19
 31e:	2f 91       	pop	r18
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <__vector_3>:

ISR(PCINT0_vect){
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
	//do something if Interrupt is triggered
}
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <__vector_16>:

ISR(TIMER0_OVF_vect){
 33e:	1f 92       	push	r1
 340:	0f 92       	push	r0
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	0f 92       	push	r0
 346:	11 24       	eor	r1, r1
 348:	8f 93       	push	r24
 34a:	9f 93       	push	r25
	timer0OverflowCounter++;
 34c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 350:	8f 5f       	subi	r24, 0xFF	; 255
 352:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

	if(timer0OverflowCounter >= 61){
 356:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 35a:	8d 33       	cpi	r24, 0x3D	; 61
 35c:	30 f0       	brcs	.+12     	; 0x36a <__vector_16+0x2c>
		PORTD ^= (1 << PIND3);
 35e:	9b b1       	in	r25, 0x0b	; 11
 360:	88 e0       	ldi	r24, 0x08	; 8
 362:	89 27       	eor	r24, r25
 364:	8b b9       	out	0x0b, r24	; 11
		timer0OverflowCounter = 0;
 366:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <flanken>:


int flanken(uint16_t currentState){
	if(currentState){
 378:	89 2b       	or	r24, r25
 37a:	49 f0       	breq	.+18     	; 0x38e <flanken+0x16>
		previousState = 1;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <previousState+0x1>
 384:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <previousState>
		return 0;
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	08 95       	ret
	}
	else{
		if(previousState == 1){
 38e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <previousState>
 392:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <previousState+0x1>
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	39 f4       	brne	.+14     	; 0x3a8 <flanken+0x30>
			previousState == 0;
 39a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <previousState>
 39e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <previousState+0x1>
			return 1;
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	08 95       	ret
		}
		else
		{
			previousState == 0;
 3a8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <previousState>
 3ac:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <previousState+0x1>
			return 0;
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
}
 3b4:	08 95       	ret

000003b6 <led_counter>:

void led_counter(uint16_t counter){
	if((counter & (1)) != 0){
 3b6:	80 ff       	sbrs	r24, 0
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <led_counter+0xc>
		PORTB |= (1<<PORTB1);
 3ba:	95 b1       	in	r25, 0x05	; 5
 3bc:	92 60       	ori	r25, 0x02	; 2
 3be:	95 b9       	out	0x05, r25	; 5
 3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <led_counter+0x12>
	}
	
	else{
		PORTB &= ~(1<<PORTB1);
 3c2:	95 b1       	in	r25, 0x05	; 5
 3c4:	9d 7f       	andi	r25, 0xFD	; 253
 3c6:	95 b9       	out	0x05, r25	; 5
	}
	if((counter & (1 << 1)) != 0){
 3c8:	81 ff       	sbrs	r24, 1
 3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <led_counter+0x1e>
		PORTB |= (1<<PORTB0);
 3cc:	95 b1       	in	r25, 0x05	; 5
 3ce:	91 60       	ori	r25, 0x01	; 1
 3d0:	95 b9       	out	0x05, r25	; 5
 3d2:	03 c0       	rjmp	.+6      	; 0x3da <led_counter+0x24>
	}
	else{
		PORTB &= ~(1<<PORTB0);
 3d4:	95 b1       	in	r25, 0x05	; 5
 3d6:	9e 7f       	andi	r25, 0xFE	; 254
 3d8:	95 b9       	out	0x05, r25	; 5
	}
	
	if((counter & (1 << 2)) != 0){
 3da:	82 ff       	sbrs	r24, 2
 3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <led_counter+0x30>
		PORTD |= (1<<PORTD7);
 3de:	8b b1       	in	r24, 0x0b	; 11
 3e0:	80 68       	ori	r24, 0x80	; 128
 3e2:	8b b9       	out	0x0b, r24	; 11
 3e4:	08 95       	ret
	}
	else{
		PORTD &= ~(1<<PORTD7);
 3e6:	8b b1       	in	r24, 0x0b	; 11
 3e8:	8f 77       	andi	r24, 0x7F	; 127
 3ea:	8b b9       	out	0x0b, r24	; 11
 3ec:	08 95       	ret

000003ee <counterWithButtons>:
	}
}

void counterWithButtons(){
	if(isEventSet(e1)){
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 66 01 	call	0x2cc	; 0x2cc <isEventSet>
 3f4:	89 2b       	or	r24, r25
 3f6:	21 f0       	breq	.+8      	; 0x400 <__EEPROM_REGION_LENGTH__>
		PORTD |= (1<<PORTD3);
 3f8:	8b b1       	in	r24, 0x0b	; 11
 3fa:	88 60       	ori	r24, 0x08	; 8
 3fc:	8b b9       	out	0x0b, r24	; 11
 3fe:	03 c0       	rjmp	.+6      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
	}
	else{
		PORTD &= ~(1<<PORTD3);
 400:	8b b1       	in	r24, 0x0b	; 11
 402:	87 7f       	andi	r24, 0xF7	; 247
 404:	8b b9       	out	0x0b, r24	; 11
	}
	
	if (flanken(PIND & (1 << PIND6)) == 1) {
 406:	89 b1       	in	r24, 0x09	; 9
 408:	80 74       	andi	r24, 0x40	; 64
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 bc 01 	call	0x378	; 0x378 <flanken>
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	19 f4       	brne	.+6      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		deleteEvent(e1);
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	0e 94 5f 01 	call	0x2be	; 0x2be <deleteEvent>
	}
	
	if(!isEventSet(e1)){
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 66 01 	call	0x2cc	; 0x2cc <isEventSet>
 420:	89 2b       	or	r24, r25
 422:	21 f5       	brne	.+72     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
		
		PORTB |= (1<<PORTB2);
 424:	85 b1       	in	r24, 0x05	; 5
 426:	84 60       	ori	r24, 0x04	; 4
 428:	85 b9       	out	0x05, r24	; 5
		
		if(counter <= 7){
 42a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter>
 42e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <counter+0x1>
 432:	08 97       	sbiw	r24, 0x08	; 8
 434:	80 f4       	brcc	.+32     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			led_counter(counter);
 436:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter>
 43a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <counter+0x1>
 43e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <led_counter>
			counter++;
 442:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter>
 446:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <counter+0x1>
 44a:	01 96       	adiw	r24, 0x01	; 1
 44c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <counter+0x1>
 450:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <counter>
 454:	1e c0       	rjmp	.+60     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
		}
		else{
			led_counter(counter);
 456:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter>
 45a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <counter+0x1>
 45e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <led_counter>
			counter = 0;
 462:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter+0x1>
 466:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <counter>
 46a:	13 c0       	rjmp	.+38     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
		}
	}
	else{
		PORTB &= ~(1<<PORTB1);
 46c:	85 b1       	in	r24, 0x05	; 5
 46e:	8d 7f       	andi	r24, 0xFD	; 253
 470:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1<<PORTB0);
 472:	85 b1       	in	r24, 0x05	; 5
 474:	8e 7f       	andi	r24, 0xFE	; 254
 476:	85 b9       	out	0x05, r24	; 5
		PORTD &= ~(1<<PORTD7);
 478:	8b b1       	in	r24, 0x0b	; 11
 47a:	8f 77       	andi	r24, 0x7F	; 127
 47c:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1<<PORTB2);
 47e:	85 b1       	in	r24, 0x05	; 5
 480:	8b 7f       	andi	r24, 0xFB	; 251
 482:	85 b9       	out	0x05, r24	; 5
		PORTD |= (1<<PORTD2);
 484:	8b b1       	in	r24, 0x0b	; 11
 486:	84 60       	ori	r24, 0x04	; 4
 488:	8b b9       	out	0x0b, r24	; 11
		
		counter = 0;
 48a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter+0x1>
 48e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <counter>
	}
	startTimer(1);
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	0e 94 ef 00 	call	0x1de	; 0x1de <startTimer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 498:	2f ef       	ldi	r18, 0xFF	; 255
 49a:	85 ea       	ldi	r24, 0xA5	; 165
 49c:	9e e0       	ldi	r25, 0x0E	; 14
 49e:	21 50       	subi	r18, 0x01	; 1
 4a0:	80 40       	sbci	r24, 0x00	; 0
 4a2:	90 40       	sbci	r25, 0x00	; 0
 4a4:	e1 f7       	brne	.-8      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4a8:	00 00       	nop
 4aa:	08 95       	ret

000004ac <main>:


int main(void)
{
	//initialize Pins
	PinInnit();
 4ac:	0e 94 3a 01 	call	0x274	; 0x274 <PinInnit>
	
	//initialize Interrupts
	InterruptInnit();
 4b0:	0e 94 16 01 	call	0x22c	; 0x22c <InterruptInnit>
	sei();
 4b4:	78 94       	sei
	
	//initialize Timers
	TimerInnit();
 4b6:	0e 94 2a 01 	call	0x254	; 0x254 <TimerInnit>
	
	//initialize Custom Timers
	initCoustomTimers();
 4ba:	0e 94 a8 00 	call	0x150	; 0x150 <initCoustomTimers>
	
	//set Custom Timers
	declareTimer(timer_1, 1000, counterWithButtons);
 4be:	47 ef       	ldi	r20, 0xF7	; 247
 4c0:	51 e0       	ldi	r21, 0x01	; 1
 4c2:	68 ee       	ldi	r22, 0xE8	; 232
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <declareTimer>
	
	while (1)
	{
		if(/*Button 1 pressed*/1){
			startTimer(1);
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	0e 94 ef 00 	call	0x1de	; 0x1de <startTimer>
		}
		if(/*Button 2 pressed*/1){
			deleteTimer(1);
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 03 01 	call	0x206	; 0x206 <deleteTimer>
 4d6:	f9 cf       	rjmp	.-14     	; 0x4ca <main+0x1e>

000004d8 <_exit>:
 4d8:	f8 94       	cli

000004da <__stop_program>:
 4da:	ff cf       	rjmp	.-2      	; 0x4da <__stop_program>
